## To-Do

Make sure there is nothing we want in R Markdown Files from below. (Varun)

Peer review of Census work. (Varun) Submit PR which fixes anything which needs fixing. Also, adds discussion questions.

Redo Distill tutorial. Make it not use a second RStudio instance. And otherwise fix and improve. Look to Euro soccer for advice. https://github.com/davidkane9/soccer_player_birth_months (Soham)

Redo R-help tutorial. Why did so few students post the reprex to RStudio Community? (Soham)


Should we teach margin of error so that they understand that concept for the Census tutorials?

Discuss Quarto

https://meghan.rbind.io/blog/quarto-slides/

Fix the dollars() error in Bootcamp script.


Revisit the Workflow tutorial. Anything useful there?


r-universe is an interesting tool. Should we set up an r-universe for PPBDS? Should we use r-universe to load learnr rather than getting it from Github? https://rstudio.r-universe.dev/ui#package:learnr How do we do that in the DESCRIPTION file?


==================

### R Markdown Files {-}

<!-- AG: This may be a bit too complicated and too long for getting started. -->

Now, we often use R to make graphs and other visualizations in order to find patterns within the data. However, it's not very useful to just create a graph and then not explain what it's actually showing. This is where R Markdown files come in.

R Markdown files, or .Rmd files, are a type of file that can generate *reports* from R code. Basically, you can write both the graph and the explanation about the graph within the same file. You can then *knit* the file in order to render the text and make it all look nice. Most of the time, we'll be knitting the file to create HTML files that we can then use to create websites that contain our code.

You can learn more about how to write R Markdown files [here](https://rmarkdown.rstudio.com/articles_intro.html).

First, create an R Markdown file by going to File -> New File -> New R Markdown. Feel free to title it whatever you wish and set the output format to "HTML". This creates a new R Markdown file with some filler information.

```{r, echo = FALSE}
knitr::include_graphics("00-getting-started/images/new_r_markdown.gif")
```

This may look like a lot, but if you look closely you can see that it's mostly just plain text but with a few special markings in between. These markings designate what the text actually does and what section it's in. Here's a basic breakdown of an R Markdown file.

```{r, echo = FALSE}
knitr::include_graphics("00-getting-started/images/rmd_example.png")
```

Each section is important.

* The YAML header is the basic information about the document, like your name, the date, and what it's supposed to output.

* The Setup code chunk is a section of R code that sets certain options about the file, such as whether it should show code chunks or not.

* The R Markdown Header makes the text bigger and look like a title.

* The R Markdown Text is the basic text information that you want in your report.

* And finally, the R code chunk allows you to put R code into your report.

All of these sections combine to create a nice looking R report. Just knit your document by pressing the blue "Knit" button in the top left.

```{r, echo=FALSE}
knitr::include_graphics("00-getting-started/images/knit.png")
```

This creates a cool looking webpage that has all of the things your R Markdown file had, but rendered so that it looks nicer.

You can also add formatting to your text in R Markdown files by **bolding** (\*\*), *italicizing* (\*), or ~~striking through~~ (~) the text. You can find a full R Markdown cheatsheet [here](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf).

Finally, you can code in R Markdown by adding a code chunk. This allows you to put R code into your R Markdown file, which then runs like normal R code but displays in the R Markdown report. That means that you can create graphs and then add your own explanations to them within the same file. 

You can see an example of a code chunk in the default R Markdown file.  
It looks like this:

````markdown
```{r pressure, echo=FALSE}`r ''`
plot(pressure)
```
````

And knits like this:

```{r, echo=FALSE}
knitr::include_graphics("00-getting-started/images/code_chunk_graph.png")
```

Overall, R Markdown files allow you to generate cool looking reports with special formatting, letting you put both your analysis and your graph together.


==================


## To discuss

* Note this message:

N  checking package dependencies (4.7s)
   Imports includes 40 non-default packages.
   Importing from so many packages makes the package vulnerable to any of
   them becoming unavailable.  Move as many as possible to Suggests and
   use conditionally.

Could we move all the packages which are used by the tutorials (except the core stuff, including primer.data) into Suggests? Students would then only install when needed. But then would the test cases pass in Github Actions?

* Note this message:

N  checking installed package size ...
     installed size is 87.8Mb
     sub-directories of 1Mb or more:
       doc         5.0Mb
       help        2.5Mb
       tutorials  80.2Mb

Should there really be 80 megs of data in the tutorials? Or is this the html pages?

### Visualization Links

These are handy links and ideas for the tutorials, mainly in week 1 and 2, which make plots. Many of the current plots are not that impressive.

http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
https://cran.r-project.org/web/packages/ggside/vignettes/ggside_basic_usage.html

https://ggplot2.tidyverse.org/articles/

[A Gentle Guide to the Grammar of Graphics](https://pkg.garrickadenbuie.com/gentle-ggplot2) or https://moderndive.com/2-viz.html#grammarofgraphics

Tidy Tuesday: https://github.com/rfordatascience/tidytuesday

gghighlights, ggsides, ggrepel

Overview of the tutorial at the start. What functions are we covering? How do the sections related to each other? How many sections are there? How do they relate to each other? How does this tutorial relate to the other tutorials this week's?

Start providing the titles and subtitles in the question so that students could copy/paste them.

Put at the start and in the middle how long the tutorial is.


## Chapter 5 and Associated Tutorials

* Discuss tutorial which would simulate the NCAA basketball tournment. What are the odds of a 5th seed winning the whole thing? Follow the 538 approach of just simulating the whole tournament a lot. Or maybe something similar but simpler?

* Discuss simulating craps. Win with 7 or 11. Lose with 2, 3, or 12. Then roll until you make your "point" and win or "crap out" by rolling  a 7.

* Review new notation in chapter.

* Give the formula for the coin and President and height examples. The mathematical distribution is one, by definition, with a formula.


Notes on Permutation Tests

* Use "There is only one test" as one of the knowledge drops, perhaps in multiple parts. Include the graphic and link to the original. http://allendowney.blogspot.com/2016/06/there-is-still-only-one-test.html

* Work through the entire simple example with N = 5. That makes things simple. Then, we do a second example, perhaps using something from primer.data, or from elsewhere. This is the approach we are currently following.





### Tutorials to add

Let's discuss the six broad categories of tutorials which we might add, especially to chapters 5 through 11.

First, we can just do more examples. Use different data with a different question, but all the same steps as in the chapter itself. Such examples will generally, like 082, do two analyses: one with all the data (to show the truth) and one in which representativeness fails in a way which we define, thereby showing how we can be led astray. Last step is to compare the answers from these two approaches, thus emphasizing the importance of humility.

Second, stand-alone tutorials on useful topics, like text modeling or networks or rtweet or whatever. These could go in any chapter and would not be restricted to having X number of parameters.

Third, we could cover many other model families, again perhaps not worrying too much about whether or not they have the "right" number of parameters. Simplest here would be other stan_glm families. That is, show a weird data set in which the outcome variable is something that should be fit with poisson or something, and then use family = poisson. Goal would be to emphasize that there are many possible models.

Fourth, expanding on the above, we might have some machine learning examples. After all, a machine-learning model is just a different kind of black box, not different conceptually than a linear or logistic model. We could fit a machine learning model on chapter 8 scenarios. Even though there are way more than three parameters in such models, they still can (I think!) be made to work in cases with just one input variable.

Fifth, real world data science examples which do not hide the messy complexity of the world. I guess that these would be a lot like the overview tutorials, but with 30 minutes of data cleaning first. These might also explicitly assume that you have done all the other tutorials in the chapter and that, therefore, we do not need to walk you through how to estimate a stan_glm() with five baby questions. Instead, the questions would be, not really harder, but messier.

Sixth, tutorials about interpreting parameters. We could have one of these in every chapter from 6 onward. These could be short! They would only cover parameter interpretation, perhaps only using the models which were used in the chapter. Or maybe a single big tutorial, for doing around chapter 10 or 11, which would cover all the messy details of interpreting parameters and also explaining why we should not spend much time on it.

Obviously, we could also combine these in various ways. Upon reflction, we should save the machine learning examples for later chapters in which we have several righhand side variables. Indeed, we could have three machine learning tutorials in chapter 11.

* Compare results from rstanarm model to an approach, like we learned in Chapter 5, in which we do the analysis "by hand," creating the joint distribution and then the posterior distribution. This is easiest to do for Chapter 6. Indeed, you can just take the code from Chapter 5, make it continuous by sampling lots of possible values, and then compare to rstanarm. Should work fine. More ambitiously, we could do this for Chapter 7. This requires a three dimensional joint distribution because there are two unknown parameters and then a two dimensional posterior, with one dimension for mu and one for sigma. This is cool! But perhaps over kill.

* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.


* A "models" which would be a full dry run of their final projects. Download some data (maybe lots of little data files) with an R script. Clean the data in other R script. Make the model (a simple two parameter model) in another R script. Then, make a distill package which uses the model to make pretty pictures which answer a couple of questions. Should show results using gtsummary to make pretty tables of model results. Might even show how stan_glm() models differ from lm() models. Or maybe run stan_glm() with option to get the lm() results. Example usage: https://ipums.github.io/pma-data-hub/posts/2021-07-01-covid-tables/

* Advanced plotting, ideally focussed on all a variety of different plotting approaches designed for modeling-type questions and answers. Maybe https://feddelegrand7.github.io/ddplot/.

* Would it be possible to have tutorials in the last few weeks which were, more or less, final project check-ins . . .

* A tutorial about working with textual data. Perhaps based on tidytext book. Also: https://datavizs21.classes.andrewheiss.com/example/13-example/

* Regression to the mean

* The garden of forking paths

* M/S errors


* An rtweet tutorial: https://github.com/ropensci/rtweet

* A Python tutorial. See the new features in learnr: "Added a new polyglot tutorial to learnr. This tutorial displays mixing R, python, and sql exercises. See run_tutorial("polyglot", "learnr") for a an example. (#397)"


### To discuss

* Another example set: https://openintrostat.github.io/ims-tutorials/

* Specify which versions of learnr (and other Github packages?) we want. Otherwise, you always get the head, which may not be desirable. Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Best single summary of tutorial tools/approaches: https://damien-datasci-blog.netlify.app/post/how-to-make-an-interactive-tutorial-to-teach-r-an-overview/


* Another way to host the tutorials: https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server/


* mention iter = 10000

### To explore later

* Powerful approach for hosting cool looking tutorials: https://github.com/ines/course-starter-r. One example of a tutorial using this approach:  https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one? https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/. I don't think so. Too many words, not enough typing.

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?


* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?

* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.





### Allison Horst interview

The main question was: How do we incorporate tutorial questions directly into the chapter itself? Allison is the world expert on this topic.

* She is concerned about user loads for published Shiny apps - would recommend that we use the basic or higher plan.

* She thinks using Desiree's method of embedding one exercise at a time might get unreasonable for a book of our size, but suggested that we could host 12 different ShinyApps corresponding to each chapter, and then link to each chapter in one central location. (Kind of like the combined tutorials app Evelyn created via HMDC.)

* How did you decide which exercises were going to be "tutorials" and which would be "exercises"? She wanted the exercises to be incremental, so a lot of the code was already pre-populated. The exercises that were blank built directly off of code that was already shown before, so that students could have an "easy win" by just copying the previous code and tweaking a variable name. Allison thinks that this incremental process is important for beginner R students.

* How much memory does the ShinyApp consume? Do you know of any tricks to make learnr tutorials smaller? She recommends that we contact the team at RStudio Education - this is not her area of expertise. Allison says that the RStudio Education team is super eager to hear about learnr use cases, would be happy to talk to us, and would even ask us to write a blog post. She also mentioned that the team would know the most about cutting-edge learnr stuff, including things like a "completion rate" bar that shows students how far they are through a tutorial.

* Any tips for remote teaching or learning? Using learnr at all is a big step. Allison also pre-records short versions of her lectures for her students to stream at a later time,  and holds smaller discussion sections in class where they do activities.

* Allison's #1 Recommendation to remote teachers of R: Having students start out with RStudio Cloud and then transitioning to Desktop. You can set up workspaces so the necessary packages are already loaded and installed, any script is already pre-loaded, and all students need to do is log in. It looks exactly the same as RStudio Desktop except folks don't have to worry about installing R or RStudio. You can push/pull from git in RStudio Cloud as well (link to a Rstudio cloud tutorial/article: https://rstudio.com/resources/webinars/teaching-r-online-with-rstudio-cloud/)

## Videos Worth Looking At?

Data Science Mini Projects: https://www.youtube.com/playlist?list=PLpdmBGJ6ELUJM6_vKQbpi9vGc65Sn0uPr
Draw Multiple Time Series in Same Plot: https://www.youtube.com/watch?v=FNXnJ_zT1gE
Barplot in R: https://www.youtube.com/watch?v=pYbuWU77QkU&feature=youtu.be

# Interestin approach for next summer

## Material from JSM 2021

Education section: https://matackett.github.io/open-stat-ds-ed/



Interesting discussion of using art to bring students into data science.

Consider the use of ggirl package for encouraging students to send someone an actual postcard.

Mine's discussion of how to make html and pdf versions of knitted R markdown look the same. Use fenced div blocks and then special CSS and LaTeX code chunks. Details: https://speakerdeck.com/minecr/openintro-building-sustaining-supporting-and-growing-open-source-educational-resources?slide=13

