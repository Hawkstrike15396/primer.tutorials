---
title: "RStudio and Github"
format: html
editor: visual
server: shiny
---

```{r setup, include = FALSE}
library(learnr)
library(primer.tutorials)
library(primer.data)
library(tidyverse)
library(knitr)
library(gistr)
knitr::opts_chunk$set(echo = FALSE)
options(tutorial.exercise.timelimit = 60, 
        tutorial.storage = "local")
```

```{r copy-code-chunk, child = "../../child_documents/copy_button.Rmd"}
```

```{r info-section, child = "../../child_documents/info_section.Rmd"}
```

## Introduction
###

But what if your computer blows up? Well, that's where tools like GitHub come in. This tutorial will walk you through the process of creating a Github account.

## Terminal Overview
###  

The RStudio [Terminal](https://support.rstudio.com/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal-in-the-RStudio-IDE) is how you directly communicate with the computer using commands, whereas the RStudio Console is how you talk to R. This section will help introduce you to it so that you'll be up to speed for the commands needed for the rest of the tutorial. 


### Exercise 1


Start by opening up the Terminal pane in RStudio. This should be right next to the Console pane in the top left of the lower left portion of RStudio.

```{r out.width="700px"}
include_graphics("images/terminalEx1.png")
```

###

You should see some text at the top, which is your file path followed by a prompt such as a dollar sign. A file path is basically where you are in the computer and how you got there, which is helpful because sometimes you can get deeply nested in folders and knowing exactly where you are makes your life easier and less confusing. Copy your file path by highlighting, right clicking, and selecting the "copy" option, then paste it into the box below.

```{r terminal-overview-1}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```

### Exercise 2

For the purposes of this tutorial you will often need to copy and paste commands into your terminal. Then you'll be instructed to paste the result into an answer box.

###
To practice, try pasting the command `echo $0` into the next line of your terminal and hit return. 

###
Copy paste the command and result into the box below

```{r terminal-overview-2}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```


###

This should return something like `/usr/bin/bash`(doesn't have to be exact). This is the name of your [shell](https://en.wikipedia.org/wiki/Shell_(computing)) which acts like a command line interpreter.

<!-- TM: Add 1-2 more introductory/very basic exercises -->

###

That's all you need to know about the terminal for this tutorial. You will be completing a separate "Terminal" dedicated tutorial in the future. Make sure to pay special attention to whether given commands are supposed to be run in the *console* or the *terminal* for the rest of the tutorial.

## Setting up GitHub

### 

GitHub is an online drive for all your R code and projects. In the professional world, what you have on your GitHub account is more important than what you have on your resume. It is a verifiable demonstration of your abilities.

### Exercise 1

Install [Git](https://git-scm.com/) by following the instructions in the [Install Git](https://happygitwithr.com/install-git.html) chapter in *[Happy Git and GitHub for the useR](https://happygitwithr.com/)*.


### 

Click on the Terminal pane. Run `git --version` in the *Terminal* to make sure that git is installed and accessible. It should return something like "git version 2.30.1 (Apple Git-130)".

### Exercise 2

The next step to create a GitHub account by following the instructions at the [GitHub mainpage](https://github.com/). Follow [**this advice**](https://happygitwithr.com/github-acct.html#username-advice) **when choosing your username.**

```{r}
include_graphics("images/github_account_creation.png")
```

### 

Copy your GitHub profile URL in the field below. It should look like:

<https://github.com/your-username>

```{r setting-up-github-2}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```

### 

[Git](https://en.wikipedia.org/wiki/Git) is "software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development."

### Exercise 3

Now that you have your GitHub account, you need to connect it to RStudio. We can do this by first giving RStudio your GitHub account email and your name.

### 

Run `usethis::use_git_config(user.name = "your-username", user.email = "your@email.org")` in the Console, substituting the email and name you used for your GitHub account.

### 

Run `git config --global user.name` in the *Terminal* to make sure your computer remembers your GitHub username. Copy paste the command and result below.

```{r setting-up-github-3}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```

### 

Then run `git config --global user.email` in the *Terminal* to make sure your GitHub email is stored too.

Copy and paste the command and results to the space below.

```{r setting-up-github-4}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```

### 

Your GitHub username and email are stored so that your computer can automate a lot of the tedious actions required to communicate with GitHub.

### 

**Note:** Make sure you received the expected outputs of the name and email associated with your Github account for the last two exercises.

## GitHub Repositories

### 

If GitHub is our Google Drive, GitHub repositories, or "repos", are the Google folders where we store our work. Let's make a practice repo!

### Exercise 1

To begin, sign into GitHub and go to the homepage. Click the green "New" button on the left of the website.

```{r out.width = "700px"}
include_graphics("images/github_new_repo.png")
```

### Exercise 2

Name your repository `First_Repo`. Then, select the "public" option for your repo and check the box saying "Add a README file". [README](https://en.wikipedia.org/wiki/README) is a document where programmers often add or explain details of their project. When in doubt follow [these instructions](https://happygitwithr.com/push-pull-github.html#make-a-repo-on-github).

After you've done that, go ahead and click "Create repository" to create your first repo!

```{r out.width = "700px"}
include_graphics("images/repo_detail.png")
```

### 

Copy the url of your project page (the page which GitHub should have directed you to after creating the repo) and paste it below. This should look something like `github.com/your-username/First_Repo`.

```{r github-repositories-2}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```

### 

The "public" option means that anyone will be able to view the repository while only you can edit it. You might have noticed "Add .gitignore" as another option, but we will never check this option since RStudio will automatically create a `.gitignore` file for us.

### Exercise 3

The next step will be to create the exact same project in your local computer through the process of **cloning**. By having a local and a GitHub version, you can edit your project on your computer and send all the changes you've made to GitHub, so the GitHub version can be synced up with your local version.

To clone the repo, click on the green button that says "Code". Then copy the link shown. You can use the clipboard button on the right to automatically copy it.

```{r, out.width="875px"}
include_graphics("images/repo_clone.png")
```

Paste the link below.

```{r github-repositories-3}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```

### 

This link points to your project folder stored in GitHub. It is slightly different from the url of the project page because the `.git` suffix shows it is a special GitHub object and not a webpage.

## Connecting GitHub to RStudio

### 

<!-- Liam: May need to restart the R session or R Studio to get .environ to work. Sys.getenv() was not working without this. -->

Now that we've created a new repository on GitHub, let's connect your `First_Repo` repository to RStudio.

### Exercise 1

While you are making a new project, you will not be able to access this tutorial. Read *all* instructions before following them.

First, restart R by going to "Session" and clicking "Restart R".

Then, click on "File" and then "New Project" in the top left of your screen.

Now, instead of clicking "New Directory", like we did previously, click on "Version Control". Then click on "Git". These screens should look like the ones shown below.

Paste the link you copied from GitHub into "Repository URL". Then make sure your project is in the `projects` directory you made in the RStudio and Code tutorial. If it is not, click on "Browse...", and select your `projects` folder. Click "Create Project".

Here's a quick gif displaying the process.

```{r}
include_graphics("images/new_git_project.gif")
```

Navigate to the Terminal tab and run `git remote -v`. Then copy and paste both the command and the output into the space below. The output should contain the original link you pasted.

**Note:** If the output does not contain the link, try switching from Terminal to the Console tab and run `system("git remote -v")`. If the output still does not contain the link, stop the tutorial and **reach out on Discord for help**.

```{r connecting-github-to-2}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 2)
```

### 

You've successfully linked another repo to RStudio!
