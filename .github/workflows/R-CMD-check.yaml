# The trickiest recent issue involves deciding between setup-renv and setup-r-dependencies. 
# In theory, we should prefer the former since renv is designed precisely to replicate
# your setup on a new machine. Unfortunately, it assumes that the machine has all the
# necessary unbuntu libraries installed. So, to get r-lib/actions/setup-renv to work,
# you need to install a bunch of libraies by hand. At one point, I determined by
# trial and error that this worked:

# - name: Install needed libraries
#     run: sudo apt-get install -y libcurl4-openssl-dev libudunits2-dev libgdal-dev libgeos-dev libproj-dev libfontconfig1-dev

# But what an absurd hack! I am not even sure which of these is truly necessary.
# (For the record, the main issues seemed to involve the R packages curl, rstanarm and sf.)
# See this issue thread for discussion:

# https://github.com/r-lib/actions/issues/652

# Anyway, for now, we will just use the setup-r-dependencies approach. It (somehow!)
# magically figures out which ubuntu libraries are needed and installs them before 
# installing any R packages. But we really should help the maintainers figure
# out how to bring this functionality to setup-renv.

# Other thoughts:

# Start with https://github.com/features/actions and https://github.com/r-lib/actions  
# for general background information. Biggest current problem is slowness. Can't
# we make this faster?
# Most useful approach is probably to use r2u. This is probably the future of fast
# builds of R environments. Currently, it seems like r2u and renv do not play
# nicely with each other.

# Workflow will run on push or pull request.
# Can specify branches if we expand past a master branch.

on:
  push:
  pull_request:

# Just the name of the workflow. I am a little confused as to the connection 
# between the `name:` of the (check? job?) and the `R-CMD-check:` string
# just below it. Do those two things need to be the same? What is the 
# `R-CMD-check:` accomplishing?

name: R-CMD-check
jobs:
  R-CMD-check:

    # Runs on ubuntu because installing weird stuff like gdal is a pain
    # on non-Unix OS.

    runs-on: ubuntu-latest

    # Environmental variables:
    # You can use environment variables to store information 
    # that you want to reference in your workflow. 
    # You reference environment variables within a 
    # workflow step or an action, and the variables are interpolated on the 
    # running machine that runs your workflow

    env:

      # Forces binary download instead of building packages from source. Still 
      # not sure if we really need all these variables. For example, since we
      # are no longer using renv, do we really need R_LIBS_USER? I also doubt
      # that we need RENV_ACTIVATE_PROJECT.

      R_COMPILE_AND_INSTALL_PACKAGES: never
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_ACTIVATE_PROJECT: TRUE
      R_LIBS_USER: ~/Library/Application Support/renv
      GITHUB_ACTION: TRUE

      # Census api key is not working, not sure how to embed it.
      # We have already defined it as a secret in github.

      CENSUS_API_KEY: ${{ secrets.CENSUS_KEY }} 

      # Not sure why but this variable seems to improve workflow.

      R_KEEP_PKG_SOURCE: yes

    
    steps:
  
      # All these "uses:" steps refer to pre-built yaml files 
      # that people have already built, making our lives easier!
      # See the following ReadMe file for information on each command.
      # https://github.com/r-lib/actions. 
      
      - uses: actions/checkout@v3
      - uses: r-lib/actions/setup-pandoc@v2      
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
      - uses: r-lib/actions/check-r-package@v2
    

